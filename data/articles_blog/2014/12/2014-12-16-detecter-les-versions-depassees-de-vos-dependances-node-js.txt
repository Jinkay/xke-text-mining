2014-12-16-detecter-les-versions-depassees-de-vos-dependances-node-js|Back|  L’écosystème Node.js est non seulement très jeune, mais également très dynamique. Les versions des librairies que vous utilisez ont tendance à changer très vite. Pour vous économiser la recherche permanente des versions de librairies les plus récentes pour mettre à jour votre fichierpackage.json,npm met à disposition l’outil npm-outdated qui se charge d’analyser vos dépendances et de vous indiquer celles qui ne sont plus à jour.  npm-outdated L’outil npm-outdated s’utilise très simplement en l’appelant de la façon suivante: npm outdated --depth=0   Et produira la sortie ci-dessous:  Les versions plus anciennes de l’outil ne produiront pas de sortie colorisée, il est donc intéressant de monter de version. La version de npm utilsée ici est la 1.4.9. npm-outdated analysera aussi bien vos dépendances standards que les dépendances de développement sans faire de distinction. La sortie retournée par l’outil ne montre que les dépendances ayant une version dépassée. Vous ne verrez donc pas les dépendances ayant une version à jour. 3 versions différentes sont renseignées: Current, Wanted et Latest. Ces versions représentent respectivement la version courante, puis la dernière version à jour correspondant au pattern de version déclaré pour votre dépendance dans le fichier package.json, et enfin la dernière version disponible de la librairie. Option depth Le paramètre –depth=0 permet de se limiter aux dépendances directes sans se soucier des dépendances tirées par les librairies elles-même tirées par vos dépendances directes. Si nous utilisons le paramètre –depth=2, les dépendances indirectes commenceront alors à être matérialisées dans la sortie de l’outil :  Option json Le paramètre –json permet quant à lui d’obtenir une sortie JSON. Cette option est particulièrement pratique pour exploiter l’information produite dans des rapports de build par exemple, ou bien pour être exploiter par d’autres outils. En exécutant la ligne de commande suivante :     npm outdated --depth=0 --json     Vous obtiendrez la sortie suivante:     {    "coffee-script": {      "current": "1.6.3",      "wanted": "1.6.3",      "latest": "1.7.1",      "location": "node_modules/coffee-script"    },    "passport-local": {      "current": "0.1.6",      "wanted": "0.1.6",      "latest": "1.0.0",      "location": "node_modules/passport-local"    },    "uglify-js": {      "current": "2.4.13",      "wanted": "2.4.14",      "latest": "2.4.14",      "location": "node_modules/uglify-js"    }, ...  }   npm-update Maintenant que vous connaissez les dernières versions disponibles, vous souhaitez peut-être en mettre certaines à jour. Pour cela, vous pouvez utiliser l’outil npm update. Pour mettre à jour la librairie request, il faudrait exécuter la commande suivante :  npm update request  Badges pour votre repository GitHub Le projet David vous permet de générer des badges indiquant si les versions de vos librairies sont à jour ou bien dépassées. Ce projet est particulièrement intéressant car, non seulement, il génère des rapports pour votre projet sans que vous ayez à lever le petit doigt, mais il génère également des badges que vous pouvez exposer les pages de votre projet permettant d’indiquer l’état des versions de vos dépendances. Pour exemple, pour savoir si le projet gtfs-playground a les versions de ses dépendances à jour, vous pouvez vous rendre sur la page suivante: https://david-dm.org/akinsella/gtfs-playground L’outil fonctionne exclusivement avec les repositories Github. Pour construire un rapport pour votre projet, il suffit de renseigner votre organization et du nom de votre repository dans l’url suivante avant de l’appeler:   https://david-dm.org/<organization>/<repository>   De même, pour obtenir le badge correspondant à votre projet, il suffit de construire la balise img comme suit:   https://david-dm.org/<organization>/<repository>.<extension>   Ce qui donne le résultat suivant pour le format png:  Et pour le format svg:  Conclusion L’écosystème Node.js évolue rapidement. Les librairies proposent donc régulièrement de nouvelles fonctionnalités ou bien encore des corrections de bug. Il ne faut donc pas hésiter à mettre à jour ses librairies. Attention cependant à ne pas non plus se précipiter et installer une version de librairie qui ne serait plus compatible avec votre code ou bien encore d’installer une version buggée. Il faut donc penser à faire tourner ses tests pour s’assurer qu’aucune regression n’impacte votre base de code.