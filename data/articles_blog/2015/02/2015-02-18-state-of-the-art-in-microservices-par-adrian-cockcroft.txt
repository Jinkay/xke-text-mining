2015-02-18-state-of-the-art-in-microservices-par-adrian-cockcroft|Back|  Le monde de l’IT ne cesse de s’accélérer. Alors que Docker n’était présent sur aucune feuille de route 2014, il le sera sur toutes en 2015. Pourquoi ? Ce mécanisme de containeur léger est agréable à utiliser en développement et facilite la chaîne de déploiement, et contrairement à une machine virtuelle, c’est extrêmement rapide. Et la vitesse, c’est addictif ! Aujourd’hui, des startups sont capables de rivaliser et prendre des parts de marché d’acteurs historiques. Elles sont souvent plus souples, plus agiles et arrivent à mieux satisfaire leurs clients rapidement, et ceux à travers le monde, tout en étant rentable en maitrisant leurs coûts notamment grâce au Cloud. Adrian a longtemps travaillé chez Netflix. Il est maintenant consultant pour apporter ses recettes d’audaces technologiques et de challenges à destinations des grandes entreprises conscientes de ce changement économique imminent. Son plan en quatre points ressemble beaucoup au PDCA :  Observe : nécessite des idées et une capacité d’innovation, Orient : valider les idées par A/B testing, Decide : être capable de prendre des décisions rapidement, Act : il faut déployer rapidement cette nouvelle idée partout (cloud to scale).  Pour pouvoir agir rapidement et efficacement, il faut changer les organisations en silos, faire tomber des barrières. Pour Adrian, l’architecture microservice est liée avec la notion d’équipe produit. Cela permet d’obtenir des petites équipes autonomes et légitimes sur un produit. Cette autonomie est la clé pour agir rapidement et efficacement sur un marché concurrentiel. Alors qu’il y a quelques temps, un slogan disait   you build it, you run it  , on peut maintenant dire   you build it, you run it, you support it  . À Devops, Adrian préfère   Business Dev Ops   car l’intérêt premier est de servir un besoin d’utilisateurs, du début à la fin. Pour arriver à ce type d’organisation, qui a fait de Netflix ce qu’il est aujourd’hui, voici les différents points à regarder. Inverse of Conway’s law La loi de Conway est bien connue. Elle stipule que l’architecture d’un projet est fortement liée au schéma d’organisation des équipes qui l’ont créé. Adrian s’en sert en retournant la loi : constitue des équipes comme tu souhaiterais que soit l’architecture de ton projet. C’est à dire, faiblement couplé et fortement cohérente ! Centralized database schema Il y aurait de trop forts couplages entre les modules si tous devaient utiliser la même base. Il faut oublier le schéma de données universel. Le mot qui revient souvent avec   microservice   est   bounded-context  . Cette notion issue de   Domain Driven Design   permet de découper un projet en un ensemble de groupements fonctionnels, isolés les uns des autres. Car un microservice répond surtout à un découpage fonctionnel et non technique. Il est différent d’un simple   bounded-context   car un microservice a en plus toutes les caractéristiques d’un système fonctionnel, OS, Log, Déploiement… C’est en quelque sorte un   running bounded-context  . Entreprise Service Bus Microservice n’est pas sans rappeler les architectures SOA. La grande différence ? Alors que les architectures SOA misaient fortement sur l’Entreprise Service Bus, cette nouvelle approche  est basée sur le concept de   dumb-pipe, smart endpoint  . Fini les bus de messages intelligents voués à contenir de la logique métier pour le routage, filtrage et regroupement des données. L’approche microservice quant à elle place ces besoins dans le code. Ainsi, le bus reste le plus simple possible. Selon Adrian, Docker accélère les développements et permet la mise en place de microservices très rapidement. Il évoque d’ailleurs   develop at the speed of Docker    Des innovations comme Amazon Lambda viennent encore accélérer tout cela. Cette fonctionnalité permet de faire exécuter à Amazon un code donné pour une requête précise. Aujourd’hui, il est ainsi possible de faire exécuter 1 Million de requêtes par mois gratuitement chez AWS. Avec le cloud, une entreprise pouvait gérer ses coûts à l’heure, nous changeons ici d’échelle car la granularité descend à 100ms ! Et la data alors ? Dans son portefeuille de projets open-source, Netflix propose pléthore d’outils à ce sujet. Ils sont aujourd’hui basés sur l’idée de   store éphémère  . Le seul élément persisté et répliqué est un journal de log, comme dans l’approche d’EventSourcing. Ensuite, toutes les autres bases de données ne sont que des vues matérialisées, reconstruites à la volée si nécessaire et détruites lorsqu’elles ne sont plus utiles. Voilà de quoi bien changer notre vision du SI de demain! Une petite lecture pour la fin : The Phoenix project book 