2015-02-25-screencast-dependency-inversion-principle|Craft|  Dans ce screencast, nous réalisons un kata pour appliquer le Principe d’Inversion de Dépendance (Dependency Inversion Principle – DIP) de SOLID. Dans la programmation orientée objet, ce principe consiste à découpler les composants de haut niveau (la logique de l’application) des composants de bas niveau (les implementations). Lorsque ce principe est appliqué, cela rend l’application moins dépendante de ses implémentations et ainsi plus simple à maintenir et à faire évoluer. Le DIP est normalement très visible dans les applications qui appliquent l’architecture Hexagonale ou même dans l’architecture Onion. C’est pourquoi nous avons passé un peu de temps à la fin de ce screencast à isoler les composants du domaine.   Vous pouvez retrouver le code source qui a été utilisé pour tourner ce screencast. La branche master représente l’état initial, la branche solution contient toutes les évolutions montrées dans la vidéo. Mise à jour Comme l’a bien dit Tristan dans les commentaires (ci-dessous), l’inversion des dépendances dans le cadre de l’exercice apparaît lorsque le package infrastructure devient dépendant du package domain (avant la logique applicative dépendait de l’implémentation technique). Cela nous a permis de découpler notre domaine fonctionnel des implémentations techniques qui n’en font pas partie, comme les clients GoogleMaps et OpenStreetMap. 