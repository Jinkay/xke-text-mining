2015-12-22-pourquoi-decouper-vos-besoins-en-petites-user-stories|Agile|  Dans le cadre d’un projet agile, une des principales missions d’un product owner est de récolter le besoin auprès des différentes parties prenantes. Ce besoin est ensuite découpé en incréments fonctionnels, et exprimé sous forme d’une ou plusieurs user stories. En 2003, Bill Wake proposait, dans ce billet, six caractéristiques pour définir une bonne user story :   I – Independent   N – Negotiable   V – Valuable   E – Estimable   S – Small   T – Testable   Dans cet article, nous partageons 4 bonnes raisons de découper vos besoins en petites user stories (critère Small) et de livrer des petits lots de fonctionnalités.  1/ Les petits lots de fonctionnalités réduisent le temps de cycle Le temps de cycle de réalisation est la durée nécessaire à la réalisation d’une fonctionnalité. Une fonctionnalité est dite terminée lorsqu’elle répond à l’ensemble des critères définit par la   Definition of Done  . Les petits lots de fonctionnalités réduisent considérablement ce temps de cycle, et cela a essentiellement deux conséquences positives :  la priorisation est plus fine, on livre plus de valeur ; la boucle d’apprentissage est plus rapide.  En quoi la priorisation est-elle plus fine ? Une grosse fonctionnalité peut cacher, derrière elle, plusieurs scénarios d’utilisation. Il se peut que l’un ou l’autre de ces scénarios ait une priorité inférieure aux autres. Découper une fonctionnalité donne l’opportunité de reporter, à plus tard, un scénario moins prioritaire. Nous optimisons donc la priorisation et la valeur du produit livré.  En quoi la boucle d’apprentissage est-elle plus rapide ? Si nous travaillons par itération (livraison à intervalle fixe d’un incrément de produit), nous avons plus de chance qu’une user story soit embarquée dans la livraison si elle est petite. En effet, plus une user story est grande, plus elle a de chances de ne pas être terminée au moment de la livraison. Nous limitons donc la   valeur reportée   à la livraison suivante. D’une manière générale, les petits lots de fonctionnalités permettent – plus fréquemment – d’avoir du retour d’information sur le produit et de dégager des actions d’amélioration. 2/ Les petites user stories réduisent la variabilité et facilitent l’adaptation au changement Les petites user stories offrent plus de souplesse en cas de changement : en effet, si un problème survient, il impacte un plus petit élément. Exemples de situation :    3/ Réduire l’incertitude et le risque Lors d’un planning poker, il est plus facile pour l’équipe d’échanger sur une user story finement découpée : la petite user story est facile à comprendre, moins floue et plus simple à estimer qu’une grosse user story.  L’équipe est plus confiante sur ce qu’elle est capable de livrer pour un Sprint, et le Product Owner sur la date d’atterrissage d’une Release. D’une manière générale, les petites user stories réduisent le risque d’effet tunnel d’un projet. 4/ Satisfaire l’équipe régulièrement Avec des petites user stories, les co-équipiers visualisent plus souvent des tâches qui passent à   Terminé  . Sur une semaine de développement par exemple, il est motivant pour les co-équipiers de voir que plusieurs user stories sont terminées : chaque user story terminée apporte individuellement une petite dose de satisfaction et cela crée aussi une dynamique d’équipe (encouragement mutuel). A contrario, les sujets qui s’éternisent sont sources de démotivation pour les équipes. Vos user stories sont-elles suffisamment petites ? Dans ce billet, Gilles Mantel donne un indicateur de la bonne taille des stories (cf. sa règle n°6) :   Il faut pouvoir prendre plus de 4 stories par sprint  . Idéalement, il faudrait même   qu’un développeur puisse travailler sur plus qu’une story pendant le sprint   pour limiter le risque de report à l’itération suivante décrit dans notre point n°1 ci-dessus. Techniques de découpage en User Stories Nous listons ci-dessous quelques liens vers des articles décrivant des techniques de découpage en user stories :  Patterns for Splitting User Stories Story Splitting Flowchart 3 manières de découper ses user stories  Illustrations par Nicolas Lochet 