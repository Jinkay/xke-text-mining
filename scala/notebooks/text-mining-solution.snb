{
  "metadata" : {
    "name" : "text-mining-solution",
    "user_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# XKE Text Mining - Solutions\n----\n****"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "This notebook aims at introducing the user to the processing and analysis of text data in Spark with Scala."
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## Settings\n----"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.SQLContext\nval sqlContext = new SQLContext(sc)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.SQLContext\nimport org.apache.spark.sql.functions.udf\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## 1 - Load data\n----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "###Text Corpus"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Load the corpus of texts stored in `/opt/docker/notebooks/data/articles_blog/` into a DataFrame\n\n> Hint 1: Texts are stored in directories associated with their year and month of release. To load every texts in one RDD, you can just use `*` instead of a directory name: \n\n`/articles_blog/*/*/*.txt`\n\n> Hint 2: Each file has the following structure: Three information separated by `|`. The resulting DataFrame then must have three columns:\n- title: String\n- category: String\n- content: String\n\n> Hint 3: One way to proceed is to create a case class with the three targeted columns, load the data into a RDD thanks to the [sc.textFile](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.SparkContext) function and then map it with the case class. The RDD will then have an associated schema, and you will therefore be able to create a DataFrame directly with the [createDataFrame](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.SQLContext) function with only the resulting rdd as argument."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "case class TextInfo(title: String, category: String, content: String)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class TextInfo\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val rdd_corpus = (sc.textFile(\"/opt/docker/notebooks/data/articles_blog/*/*/*.txt\")\n                  .map(_.split(\"\\\\|\"))\n                  .map(x => TextInfo(x(0), x(1), x(2))))\nval df_corpus = sqlContext.createDataFrame(rdd_corpus)\ndf_corpus.persist()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rdd_corpus: org.apache.spark.rdd.RDD[TextInfo] = MapPartitionsRDD[24] at map at <console>:54\ndf_corpus: org.apache.spark.sql.DataFrame = [title: string, category: string, content: string]\nres7: df_corpus.type = [title: string, category: string, content: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<span style=\"color:red;\">Ooops, exception in the cell: </span>"
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "df_corpus.printSchema()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "root\n |-- title: string (nullable = true)\n |-- category: string (nullable = true)\n |-- content: string (nullable = true)\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// Run this test to check if you got the right DataFrame size\nassert(df_corpus.count() == 335)",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Stopwords"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Load the stopwords stored in `/opt/docker/notebooks/data/stopwords_french.txt` in an Array[String]"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val stopwords = sc.textFile(\"/opt/docker/notebooks/data/stopwords_french.txt\").collect()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "stopwords: Array[String] = Array(alors, au, aucuns, aussi, autre, avant, avec, avoir, bon, car, ce, cela, ces, ceux, chaque, ci, comme, comment, dans, de, des, du, dedans, dehors, depuis, deux, devrait, doit, donc, dos, droite, d?but, elle, elles, en, encore, essai, est, et, eu, fait, faites, fois, font, force, haut, hors, ici, il, ils, je, juste, la, le, les, leur, l?, ma, maintenant, mais, mes, mine, moins, mon, mot, m?me, ni, nomm?s, notre, nous, nouveaux, ou, o?, par, parce, parole, pas, personnes, peut, peu, pi?ce, plupart, pour, pourquoi, quand, que, quel, quelle, quelles, quels, qui, sa, sans, ses, seulement, si, sien, son, sont, sous, soyez, sujet, sur, ta, tandis, tellement, tels, tes, ton, tous, tout, trop, tr?s, tu, valeur, voie, voient, vont, votre, vous, vu, ?a, ?taient, ?t..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8d9f911121a1612646305283bc478e09&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;alors&quot;},{&quot;string value&quot;:&quot;au&quot;},{&quot;string value&quot;:&quot;aucuns&quot;},{&quot;string value&quot;:&quot;aussi&quot;},{&quot;string value&quot;:&quot;autre&quot;},{&quot;string value&quot;:&quot;avant&quot;},{&quot;string value&quot;:&quot;avec&quot;},{&quot;string value&quot;:&quot;avoir&quot;},{&quot;string value&quot;:&quot;bon&quot;},{&quot;string value&quot;:&quot;car&quot;},{&quot;string value&quot;:&quot;ce&quot;},{&quot;string value&quot;:&quot;cela&quot;},{&quot;string value&quot;:&quot;ces&quot;},{&quot;string value&quot;:&quot;ceux&quot;},{&quot;string value&quot;:&quot;chaque&quot;},{&quot;string value&quot;:&quot;ci&quot;},{&quot;string value&quot;:&quot;comme&quot;},{&quot;string value&quot;:&quot;comment&quot;},{&quot;string value&quot;:&quot;dans&quot;},{&quot;string value&quot;:&quot;de&quot;},{&quot;string value&quot;:&quot;des&quot;},{&quot;string value&quot;:&quot;du&quot;},{&quot;string value&quot;:&quot;dedans&quot;},{&quot;string value&quot;:&quot;dehors&quot;},{&quot;string value&quot;:&quot;depuis&quot;}],&quot;genId&quot;:&quot;1984672167&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anond5463c7e031d3e21e74d855535dfa566\">\n      Max Points\n    </label><input id=\"input-anond5463c7e031d3e21e74d855535dfa566\" type=\"number\" name=\"input-anond5463c7e031d3e21e74d855535dfa566\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anond5463c7e031d3e21e74d855535dfa566\" data-this=\"{&quot;valueId&quot;:&quot;anond5463c7e031d3e21e74d855535dfa566&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon2b1d4398f23873acaffc2e7a8282a6a7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon7eda3d760f484d03a74bf7f4522064d5&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div></div></div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// Run this test to check if you got the right array size\nassert(stopwords.length == 237)",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## 2 - Tokenizer\n----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Now that the data is available, it is time to pre-process it before we can use it in algorithms. The first thing to do is to tokenize each text to get an array of tokens (words) that will be used afterwards."
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Create a function tokens: String => Array[String] with transforms a String into an array of tokens. The transformation can perform the following actions:\n\n- Split on spaces (mandatory)\n- Remove punctuation (can be done with `replaceAll(\"[^a-z\\\\sA-Z]\",\"\")` \n- Convert to lowercase\n- Remove every stopwords"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val tokens: String => Array[String] = _.replaceAll(\"[^a-z\\\\sA-Z]\",\"\").toLowerCase().split(\" \").filter(word => !stopwords.contains(word) & word.length > 2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "tokens: String => Array[String] = <function1>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "&lt;function1&gt;"
      },
      "output_type" : "execute_result",
      "execution_count" : 41
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// Test your function\ntokens(\"Hello, World!\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res25: Array[String] = Array(hello, world)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anone2daceb215d342264e6a3b9d19c403a4&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;hello&quot;},{&quot;string value&quot;:&quot;world&quot;}],&quot;genId&quot;:&quot;434740632&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon7b10f0147d12cb433f2d16fef9738bf7\">\n      Max Points\n    </label><input id=\"input-anon7b10f0147d12cb433f2d16fef9738bf7\" type=\"number\" name=\"input-anon7b10f0147d12cb433f2d16fef9738bf7\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon7b10f0147d12cb433f2d16fef9738bf7\" data-this=\"{&quot;valueId&quot;:&quot;anon7b10f0147d12cb433f2d16fef9738bf7&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonee698ef35d1b5eb94299c9e50d9b7d87&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf6fbd466e98cf32822ce73a188fffc2d&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div></div></div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 36
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Create a Spark UDF (User Defined Function) which uses the previous tokens function\n\n> Hint: Use the [udf](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.UserDefinedFunction) function with your previous function as unique argument"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions.udf\n\nval tokenizeContent = udf(tokens)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.functions.udf\ntokenizeContent: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(StringType,true),List(StringType))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "UserDefinedFunction(&lt;function1&gt;,ArrayType(StringType,true),List(StringType))"
      },
      "output_type" : "execute_result",
      "execution_count" : 37
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Add a new column named `tokens` to the df_corpus DataFrame containing the result of the tokenizer UDF used on the `content` column\n\n> Hint 1: Use the [withColumn](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame) method of the df_corpus DataFrame\n\n> Hint 2: To apply the UDF on a DataFrame column, just do the following: `yourFunction(yourDF(col_name))`"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val df_tokens = df_corpus.withColumn(\"tokens\", tokenizeContent(df_corpus(\"content\")))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "df_tokens: org.apache.spark.sql.DataFrame = [title: string, category: string, content: string, tokens: array<string>]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon290201b46d5664d80026022f4c9f92ab&quot;,&quot;partitionIndexId&quot;:&quot;anon3913a6cd26bb9ad3b514878149aaae71&quot;,&quot;numPartitions&quot;:14,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;title&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;category&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;content&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;tokens&quot;,&quot;type&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;elementType&quot;:&quot;string&quot;,&quot;containsNull&quot;:true},&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 38
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// Check if your DataFrame has the right column names\ndf_tokens.dtypes",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res26: Array[(String, String)] = Array((title,StringType), (category,StringType), (content,StringType), (tokens,ArrayType(StringType,true)))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon20b0237482ed57e67c489e9c5943e14e&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;title&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;category&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;content&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;tokens&quot;,&quot;_2&quot;:&quot;ArrayType(StringType,true)&quot;}],&quot;genId&quot;:&quot;867669698&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon1278888e5c65b527b6721569bed23182\">\n      Max Points (controlling all tabs)\n    </label><input id=\"input-anon1278888e5c65b527b6721569bed23182\" type=\"number\" name=\"input-anon1278888e5c65b527b6721569bed23182\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon1278888e5c65b527b6721569bed23182\" data-this=\"{&quot;valueId&quot;:&quot;anon1278888e5c65b527b6721569bed23182&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul867669698\"><li>\n                <a href=\"#tab867669698-0\"><i class=\"fa fa-table\"/></a>\n              </li><li>\n                <a href=\"#tab867669698-1\"><i class=\"fa fa-pie-chart\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab867669698\"><div class=\"tab-pane\" id=\"tab867669698-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonf35a368d078ad64d09f5226b299d4b00&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;title&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;category&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;content&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;tokens&quot;,&quot;_2&quot;:&quot;ArrayType(StringType,true)&quot;}],&quot;genId&quot;:&quot;1404152702&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon8147985172776a65e29648be787fd568\">\n      Max Points\n    </label><input id=\"input-anon8147985172776a65e29648be787fd568\" type=\"number\" name=\"input-anon8147985172776a65e29648be787fd568\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon8147985172776a65e29648be787fd568\" data-this=\"{&quot;valueId&quot;:&quot;anon8147985172776a65e29648be787fd568&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1f4e0a82dd0f101556d3c5c3309c1e3c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon9809d38258b546c629f62107de1f6694&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div><div class=\"tab-pane\" id=\"tab867669698-1\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon761fb81589309b14a79d0558cb6f04b7&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:&quot;title&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;category&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;content&quot;,&quot;_2&quot;:&quot;StringType&quot;},{&quot;_1&quot;:&quot;tokens&quot;,&quot;_2&quot;:&quot;ArrayType(StringType,true)&quot;}],&quot;genId&quot;:&quot;784437184&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pieChart'], \n      function(playground, _magicpieChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpieChart,\n    \"o\": {\"series\":\"_1\",\"p\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon3d0c5f9f410cc65995ce0c50f38ac999\">\n      Max Points\n    </label><input id=\"input-anon3d0c5f9f410cc65995ce0c50f38ac999\" type=\"number\" name=\"input-anon3d0c5f9f410cc65995ce0c50f38ac999\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon3d0c5f9f410cc65995ce0c50f38ac999\" data-this=\"{&quot;valueId&quot;:&quot;anon3d0c5f9f410cc65995ce0c50f38ac999&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonc5ec0beaaf537ef5616ea9a7a7ce57cf&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon18e7b8b6f1145644da9a43bef02c2bc9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 39
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "df_tokens.show(2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+--------------------+-------------+--------------------+--------------------+\n|               title|     category|             content|              tokens|\n+--------------------+-------------+--------------------+--------------------+\n|2014-01-08-crafts...|        Craft|  Pour coder tous...|[coder, jours, pl...|\n|2014-01-10-androi...|AndroidMobile|  En tant que d?v...|[tant, dveloppeur...|\n+--------------------+-------------+--------------------+--------------------+\nonly showing top 2 rows\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 47
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### What are the 10 most used words in the corpus ?\n\n> Hint 1: Use the `explode` function to have a DataFrame with one word per line\n\n> Hint 2: You can perform the following operations\n- Use the select function and use the explose function on the `tokens` column inside, name it \"word\"\n- Group By the \"word\" column\n- Use the count function to count the number of occurrences of each word\n- Order By the count result, descending, and show the 10 first resulting words"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions.{explode, desc}\n\nval df_words = df_tokens.select(explode(df_tokens(\"tokens\")).alias(\"word\"))\ndf_words.groupBy(\"word\").count().orderBy(desc(\"count\")).show(10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+------+-----+\n|  word|count|\n+------+-----+\n|  plus| 1564|\n| cette|  892|\n|   dun|  783|\n|  cest|  762|\n| faire|  610|\n|  code|  604|\n|  dune|  578|\n|projet|  571|\n|  bien|  570|\n|   tre|  568|\n+------+-----+\nonly showing top 10 rows\n\nimport org.apache.spark.sql.functions.{explode, desc}\ndf_words: org.apache.spark.sql.DataFrame = [word: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 40
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "> You should observe that even with a descent tokenizing, the most used words are still not very usefull to characterize the articles."
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## 3 - Word2Vec\n----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Now that we have tokens, we can use them in some algorithms to extract useful features from them. One algorithm that we can use is [Word2Vec](https://spark.apache.org/docs/latest/ml-features.html#word2vec), which has an implementation in Sparl ML."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.Word2Vec",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.Word2Vec\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 42
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Training model"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Instanciate a new Word2Vec object with the following settings\n- inputCol: \"tokens\"\n- outputCol: \"w2c_features\"\n- vectorSize: 20\n- minCount: 10\n- maxIter: 20"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val word2Vec = new Word2Vec()\n  .setInputCol(\"tokens\")\n  .setOutputCol(\"w2c_features\")\n  .setVectorSize(50)\n  .setMinCount(10)\n  .setMaxIter(50)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "word2Vec: org.apache.spark.ml.feature.Word2Vec = w2v_0e4c1daa0456\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "w2v_0e4c1daa0456"
      },
      "output_type" : "execute_result",
      "execution_count" : 43
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "##### Train a model on the `df_tokens` DataFrame using the fit method\n\n> This might take a few minutes to run depending on the parameters you chose\n\n> You can try different parameters from the ones proposed, but avoid providing values that are too high when you don't work on a cluster"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val word2Vec_model = word2Vec.fit(df_tokens)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "word2Vec_model: org.apache.spark.ml.feature.Word2VecModel = w2v_0e4c1daa0456\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "w2v_0e4c1daa0456"
      },
      "output_type" : "execute_result",
      "execution_count" : 44
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "We now have on our hands a learned Word2Vec model that we can use and query.\n\n##### Check how the learning phase went by finding synonyms of a few words of your choice\n\n> Hint 1: Use the `findSynonyms(word, num_synonyms)` method called on the learned model\n\n> Hint 2: The result of that function is a DataFrame. Use the show method on it to print the results"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "word2Vec_model.findSynonyms(\"data\", 10).show()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+----------+------------------+\n|      word|        similarity|\n+----------+------------------+\n|       big| 1.681505284011964|\n|   science|1.5372284203048856|\n|scientists| 1.516485080843642|\n|    pandas|1.4295046770483246|\n| rddvector|1.4123559296603898|\n|     spark| 1.385813882329892|\n|       rdd| 1.287445195326494|\n|       lab|1.2841311983848427|\n|    donnes|1.2785464182034576|\n|dataframes|1.2533541182769836|\n+----------+------------------+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 52
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}